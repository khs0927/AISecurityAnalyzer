name: 서버리스 배포 워크플로우

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: '배포 환경 선택'
        required: true
        default: 'staging'
        options:
          - staging
          - production

jobs:
  deploy-frontend:
    name: 프론트엔드 배포
    runs-on: ubuntu-latest
    steps:
      - name: 소스 코드 체크아웃
        uses: actions/checkout@v3

      - name: Node.js 설정
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: PNPM 설정
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 종속성 설치
        run: pnpm install --frozen-lockfile

      - name: 환경 변수 설정
        run: |
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> client/.env.production
          echo "VITE_PUSHER_APP_KEY=${{ secrets.VITE_PUSHER_APP_KEY }}" >> client/.env.production
          echo "VITE_PUSHER_CLUSTER=${{ secrets.VITE_PUSHER_CLUSTER }}" >> client/.env.production

      - name: 프론트엔드 빌드
        run: pnpm --filter client build

      - name: Netlify CLI 설치
        run: npm install -g netlify-cli

      - name: Netlify 배포
        uses: netlify/actions/cli@master
        with:
          args: deploy --prod --dir=client/dist --site=${{ secrets.NETLIFY_SITE_ID }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  deploy-backend:
    name: 백엔드 배포
    runs-on: ubuntu-latest
    needs: deploy-frontend
    steps:
      - name: 소스 코드 체크아웃
        uses: actions/checkout@v3

      - name: Node.js 설정
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: PNPM 설정
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 종속성 설치
        run: pnpm install --frozen-lockfile

      - name: 환경 변수 설정
        run: |
          cp .env.serverless server/.env.production
          echo "API_PORT=${{ secrets.API_PORT }}" >> server/.env.production
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> server/.env.production
          echo "SUPABASE_PUBLIC_KEY=${{ secrets.SUPABASE_PUBLIC_KEY }}" >> server/.env.production
          echo "SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}" >> server/.env.production

      - name: 서버 빌드
        run: pnpm --filter server build

      - name: 서버 배포 준비
        run: |
          mkdir -p deploy
          cp -r server/dist deploy/
          cp server/package.json deploy/
          cp server/.env.production deploy/
          cd deploy && tar -czf ../server-deploy.tar.gz .

      - name: 서버 배포
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "server-deploy.tar.gz"
          target: "/tmp"

      - name: 서버 업데이트 및 재시작
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            mkdir -p ~/nottoday-server
            cd ~/nottoday-server
            tar -xzf /tmp/server-deploy.tar.gz -C .
            npm install --production
            pm2 stop nottoday-api || true
            pm2 start dist/index.js --name nottoday-api
            pm2 save
            rm /tmp/server-deploy.tar.gz

  setup-database:
    name: 데이터베이스 마이그레이션
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: 소스 코드 체크아웃
        uses: actions/checkout@v3

      - name: Node.js 설정
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: PNPM 설정
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 종속성 설치
        run: pnpm install --frozen-lockfile

      - name: 데이터베이스 마이그레이션
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          cd server
          pnpm supabase db migrate 