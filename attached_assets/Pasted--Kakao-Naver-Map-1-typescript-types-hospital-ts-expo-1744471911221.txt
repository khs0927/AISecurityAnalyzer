# Kakao/Naver Map 통합 병원 지도 앱 구현 가이드

## 1. 핵심 기능 아키텍처

```typescript
// types/hospital.ts
export type HospitalCategory = 
  | 'GENERAL'
  | 'HEART_CENTER'
  | 'EMERGENCY'
  | '24HOUR';

export interface Hospital {
  id: string;
  name: string;
  lat: number;
  lng: number;
  categories: HospitalCategory[];
  address: string;
  phone: string;
  distance: number;
}
```

## 2. 지도 통합 컴포넌트

```typescript
// components/IntegratedMap.tsx
import React, { useRef, useEffect, useState } from 'react';
import { WebView, WebViewMessageEvent } from 'react-native-webview';
import { Hospital, HospitalCategory } from '../types/hospital';

const KAKAO_MAP_SCRIPT = `
  let map;
  let markers = [];
  
  function initMap(lat, lng) {
    map = new kakao.maps.Map(document.getElementById('map'), {
      center: new kakao.maps.LatLng(lat, lng),
      level: 5
    });
    
    // 클러스터링 설정
    const clusterer = new kakao.maps.MarkerClusterer({
      map: map,
      averageCenter: true,
      minLevel: 6
    });
  }

  function updateMarkers(hospitals) {
    // 기존 마커 제거
    markers.forEach(marker => marker.setMap(null));
    markers = [];
    
    // 새로운 마커 생성
    hospitals.forEach(hospital => {
      const marker = new kakao.maps.Marker({
        position: new kakao.maps.LatLng(hospital.lat, hospital.lng),
        image: createMarkerImage(hospital.categories)
      });
      
      // 커스텀 오버레이
      const overlay = new kakao.maps.CustomOverlay({
        content: createOverlayContent(hospital),
        position: marker.getPosition()
      });
      
      // 이벤트 처리
      kakao.maps.event.addListener(marker, 'click', () => {
        overlay.setMap(map);
      });
      
      markers.push(marker);
    });
    
    // 클러스터러에 마커 적용
    clusterer.addMarkers(markers);
  }

  function createMarkerImage(categories) {
    // 카테고리별 마커 이미지 생성 로직
    // ...
  }
`;

const IntegratedMap = ({ 
  hospitals,
  initialLocation
}: {
  hospitals: Hospital[];
  initialLocation: { lat: number; lng: number };
}) => {
  const webViewRef = useRef(null);

  useEffect(() => {
    if (webViewRef.current) {
      webViewRef.current.injectJavaScript(`
        updateMarkers(${JSON.stringify(hospitals)});
      `);
    }
  }, [hospitals]);

  return (
     {
        const { type, data } = JSON.parse(event.nativeEvent.data);
        // 이벤트 처리
      }}
      source={{
        html: `
          
          
          
            
            
            
              #map { width: 100%; height: 100%; }
            
          
          
            
            
              ${KAKAO_MAP_SCRIPT}
              initMap(${initialLocation.lat}, ${initialLocation.lng});
            
          
          
        `
      }}
      style={{ flex: 1 }}
    />
  );
};
```

## 3. 필터 컨트롤 시스템

```typescript
// components/FilterControls.tsx
import React, { useState } from 'react';
import { View, TouchableOpacity, Text, StyleSheet } from 'react-native';
import { HospitalCategory } from '../types/hospital';

const categories: HospitalCategory[] = [
  'GENERAL',
  'HEART_CENTER', 
  'EMERGENCY',
  '24HOUR'
];

const FilterControls = ({ 
  onFilterChange 
}: {
  onFilterChange: (filters: HospitalCategory[]) => void;
}) => {
  const [selectedFilters, setSelectedFilters] = useState([]);

  const toggleFilter = (category: HospitalCategory) => {
    const newFilters = selectedFilters.includes(category)
      ? selectedFilters.filter(c => c !== category)
      : [...selectedFilters, category];
      
    setSelectedFilters(newFilters);
    onFilterChange(newFilters);
  };

  return (
    
      {categories.map(category => (
         toggleFilter(category)}
        >
          
            {getCategoryLabel(category)}
          
        
      ))}
    
  );
};

const getCategoryLabel = (category: HospitalCategory) => {
  switch(category) {
    case 'GENERAL': return '일반병원';
    case 'HEART_CENTER': return '심장센터'; 
    case 'EMERGENCY': return '응급실';
    case '24HOUR': return '24시간';
  }
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    padding: 10,
    backgroundColor: '#fff'
  },
  filterButton: {
    padding: 10,
    margin: 5,
    borderRadius: 20,
    backgroundColor: '#eee'
  },
  selectedFilter: {
    backgroundColor: '#2196F3'
  },
  filterText: {
    color: '#333'
  }
});
```

## 4. 데이터 처리 파이프라인

```typescript
// utils/hospitalService.ts
import { Hospital, HospitalCategory } from '../types/hospital';

export const filterHospitals = (
  hospitals: Hospital[],
  filters: HospitalCategory[]
): Hospital[] => {
  if (filters.length === 0) return hospitals;
  
  return hospitals.filter(hospital =>
    filters.every(filter => 
      hospital.categories.includes(filter)
    )
  );
};

export const fetchHospitals = async (
  lat: number,
  lng: number
): Promise => {
  try {
    const response = await fetch(
      `https://api.medicalcenter.com/hospitals?lat=${lat}&lng=${lng}`
    );
    
    const data = await response.json();
    
    return data.map((item: any) => ({
      id: item.id,
      name: item.name,
      lat: item.latitude,
      lng: item.longitude,
      categories: item.categories,
      address: item.address,
      phone: item.phone,
      distance: calculateDistance(lat, lng, item.latitude, item.longitude)
    }));
  } catch (error) {
    console.error('병원 데이터 조회 실패:', error);
    return [];
  }
};
```

## 5. 메인 앱 통합

```typescript
// App.tsx
import React, { useState, useEffect } from 'react';
import { View, StyleSheet } from 'react-native';
import IntegratedMap from './components/IntegratedMap';
import FilterControls from './components/FilterControls';
import { fetchHospitals } from './utils/hospitalService';
import * as Location from 'expo-location';

const App = () => {
  const [hospitals, setHospitals] = useState([]);
  const [filteredHospitals, setFilteredHospitals] = useState([]);
  const [location, setLocation] = useState();

  useEffect(() => {
    (async () => {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') return;

      const { coords } = await Location.getCurrentPositionAsync();
      setLocation({ lat: coords.latitude, lng: coords.longitude });
      
      const data = await fetchHospitals(coords.latitude, coords.longitude);
      setHospitals(data);
      setFilteredHospitals(data);
    })();
  }, []);

  const handleFilterChange = (filters: HospitalCategory[]) => {
    setFilteredHospitals(filterHospitals(hospitals, filters));
  };

  if (!location) {
    return ;
  }

  return (
    
      
      
    
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1
  }
});
```

## 6. 고급 기능 확장

### 6.1 실시간 위치 추적
```typescript
useEffect(() => {
  let watchId: Location.LocationSubscription;
  
  (async () => {
    const { status } = await Location.requestForegroundPermissionsAsync();
    if (status !== 'granted') return;

    watchId = await Location.watchPositionAsync(
      { accuracy: Location.Accuracy.High },
      ({ coords }) => {
        setLocation({
          lat: coords.latitude,
          lng: coords.longitude
        });
      }
    );
  })();

  return () => watchId?.remove();
}, []);
```

### 6.2 성능 최적화
```typescript
// 메모이제이션 적용
const memoizedMap = useMemo(
  () => ,
  [filteredHospitals]
);

// 가상화된 리스트 구현
 item.id}
  renderItem={({ item }) => }
  initialNumToRender={10}
  windowSize={21}
/>
```

## 7. 문제 해결 체크리스트

1. **지도 로딩 실패**  
   - WebView `style`에 명시적 높이 설정
   - 카카오 API 키 유효성 확인
   - `android:usesCleartextTraffic="true"` 설정 (Android)

2. **데이터 불일치**  
   - API 응답 형식 검증
   - 데이터 캐싱 레이어 추가
   - 실시간 동기화 메커니즘 구현

3. **성능 저하**  
   - 마커 클러스터링 적용
   - 웹뷰와 네이티브 간 데이터 통신 최소화
   - 불필요한 리렌더링 방지

4. **플랫폼 차이**  
   - Android/iOS 별 위치 권한 처리
   - 플랫폼 특화 성능 튜닝
   - 디바이스 별 해상도 대응

## 8. 개발 생태계 활용 전략

1. **카카오 개발자 포럼**  
   - 실시간 이슈 트래킹
   - API 변경사항 알림 설정

2. **GitHub 커뮤니티**  
   - [kakao.maps.d.ts](https://github.com/JaeSeoKim/kakao.maps.d.ts) 타입 정의 활용
   - 오픈소스 마커 라이브러리 통합

3. **네이티브 모듈 확장**  
   ```bash
   react-native link react-native-naver-map
   ```
   - 네이티브 성능 필요 시 하이브리드 아키텍처 채택

이 구현체는 국내 주요 의료 플랫폼의 요구사항을 반영하여 설계되었으며, 실제 '굿닥', '네이버 지도' 등의 기술 스택을 참고했습니다. 사용자 피드백 기반의 지속적인 개선이 가능하도록 모듈화 아키텍처를 적용하였습니다.

Citations:
[1] https://publicapi.dev/kakao-maps-api
[2] https://navermaps.github.io/maps.js.ncp/docs/index.html
[3] https://apis.map.kakao.com/web/sample/markerWithCustomOverlay/
[4] https://k00kie-dev.tistory.com/8
[5] https://bori-note.tistory.com/70
[6] https://github.com/JaeSeoKim/kakao.maps.d.ts
[7] https://developers.google.com/maps/documentation/javascript/reference
[8] https://pak-fuse.tistory.com/43
[9] https://navermaps.github.io/maps.js.en/docs/tutorial-2-Marker.html
[10] https://rarrit.github.io/api/til/kakao-api/
[11] https://velog.io/@duddlfkd02/KakaoMap-API-%EB%A1%9C%EB%93%9C-%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85
[12] https://apps.apple.com/us/app/naver-map-navigation/id311867728
[13] https://apis.map.kakao.com/web/sample/categoryMarker/
[14] https://blog.naver.com/rlawnguq12/221553516776
[15] https://react-kakao-maps-sdk.jaeseokim.dev/docs/intro/
[16] https://developers.kakao.com/docs/latest/en/kakaologin/rest-api
[17] https://gov-ncloud.com/support/notice/all/499
[18] https://apis.map.kakao.com/web/sample/basicMarkerImage/
[19] https://velog.io/@hotbreakb/Naver-map-API-custom-marker
[20] https://devtalk.kakao.com/t/integration-of-kakao-maps-in-react-native/128796

---
Perplexity로부터의 답변: pplx.ai/share