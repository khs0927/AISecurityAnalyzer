# 스마트워치 연동을 통한 건강 모니터링 시스템 구현

이 보고서는 실제 스마트워치 연동을 통한 심전도(ECG), 산소포화도(SpO2) 등을 모니터링할 수 있는 건강 모니터링 애플리케이션의 전체 코드 구현에 대해 설명합니다. 프론트엔드와 백엔드를 모두 포함하여 완전한 시스템을 구축하는 방법을 다룹니다.

## 시스템 개요 및 아키텍처

ONE MORE LIFE 건강 모니터링 시스템은 스마트워치(Apple Watch, Galaxy Watch 등)와 연동하여 사용자의 실시간 생체 신호를 측정, 분석하고 위험 상황을 감지하는 애플리케이션입니다. 시스템은 다음과 같은 주요 구성 요소로 이루어져 있습니다.

### 주요 기능
- 스마트워치와 블루투스 연결 및 실시간 데이터 수집
- 심전도(ECG), 산소포화도(SpO2), 심박수 등 활력징후 모니터링
- 실시간 데이터 분석 및 위험도 평가
- 건강 데이터 기록 및 저장
- 위험 상황 감지 시 알림 및 긴급 연락 기능

### 기술 스택
- **프론트엔드**: React, TypeScript, TailwindCSS
- **백엔드**: Express.js, Node.js
- **데이터베이스**: PostgreSQL(Neon DB)
- **ORM**: Drizzle ORM
- **통신**: Web Bluetooth API, WebSocket
- **차트**: Chart.js, Recharts

## 프론트엔드 구현

### 스마트워치 연결 관리 (SmartWatchContext.tsx)

스마트워치와의 연결 상태 및 데이터를 전역적으로 관리하기 위한 Context 구현입니다.

```tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { connectToSmartWatch, disconnectFromSmartWatch, listenToSmartWatchData } from '@/lib/bluetooth';

interface SmartWatchData {
  heartRate: number | null;
  oxygenLevel: number | null;
  ecgData: number[] | null;
  ppgData: number[] | null;
  temperature: number | null;
  batteryLevel: number | null;
  isRecording: boolean;
  lastUpdated: Date | null;
}

interface SmartWatchContextType {
  isConnected: boolean;
  isConnecting: boolean;
  deviceInfo: {
    name: string | null;
    id: string | null;
    model: string | null;
  };
  data: SmartWatchData;
  connect: () => Promise;
  disconnect: () => void;
  startRecording: () => void;
  stopRecording: () => void;
  error: string | null;
}

const initialData: SmartWatchData = {
  heartRate: null,
  oxygenLevel: null,
  ecgData: null,
  ppgData: null,
  temperature: null,
  batteryLevel: null,
  isRecording: false,
  lastUpdated: null,
};

const SmartWatchContext = createContext(undefined);

export const useSmartWatch = () => {
  const context = useContext(SmartWatchContext);
  if (!context) {
    throw new Error('useSmartWatch must be used within a SmartWatchProvider');
  }
  return context;
};

export const SmartWatchProvider = ({ children }: { children: ReactNode }) => {
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [deviceInfo, setDeviceInfo] = useState({
    name: null as string | null,
    id: null as string | null,
    model: null as string | null,
  });
  const [data, setData] = useState(initialData);
  const [error, setError] = useState(null);

  const handleDataUpdate = (newData: Partial) => {
    setData(prev => ({
      ...prev,
      ...newData,
      lastUpdated: new Date(),
    }));
  };

  const connect = async () => {
    try {
      setIsConnecting(true);
      setError(null);
      
      const deviceResult = await connectToSmartWatch();
      
      setDeviceInfo({
        name: deviceResult.name,
        id: deviceResult.id,
        model: deviceResult.model,
      });
      
      setIsConnected(true);
      
      // 데이터 수신 리스너 등록
      listenToSmartWatchData(handleDataUpdate);
    } catch (err) {
      setError(err instanceof Error ? err.message : '스마트워치 연결에 실패했습니다.');
    } finally {
      setIsConnecting(false);
    }
  };

  // 기타 함수 및 컨텍스트 프로바이더 생략...
};
```

### 블루투스 통신 모듈 (bluetooth.ts)

Web Bluetooth API를 사용하여 스마트워치와 통신하는 핵심 라이브러리입니다.

```typescript
import { SmartWatchData } from '@/contexts/SmartWatchContext';

interface BluetoothDevice {
  name: string;
  id: string;
  model: string;
}

let dataUpdateCallback: ((data: Partial) => void) | null = null;

export const connectToSmartWatch = async (): Promise => {
  try {
    if (!navigator.bluetooth) {
      throw new Error('이 브라우저는 Bluetooth 기능을 지원하지 않습니다.');
    }

    // 블루투스 장치 요청
    const device = await navigator.bluetooth.requestDevice({
      filters: [
        { services: ['heart_rate'] },
        { services: ['health_thermometer'] },
        { namePrefix: 'Apple Watch' },
        { namePrefix: 'Galaxy Watch' }
      ],
      optionalServices: [
        'battery_service',
        'device_information',
        'heart_rate',
        'health_thermometer',
        '6e400001-b5a3-f393-e0a9-e50e24dcca9e' // ECG 서비스 UUID
      ]
    });

    const server = await device.gatt?.connect();
    if (!server) {
      throw new Error('GATT 서버에 연결할 수 없습니다.');
    }

    // 심박수, 산소포화도, 체온 등 각 서비스 연결
    await connectHeartRateService(server);
    await connectOxygenLevelService(server);
    await connectTemperatureService(server);
    await connectBatteryService(server);

    return {
      name: device.name || '알 수 없는 장치',
      id: device.id,
      model: '스마트워치'
    };
  } catch (err) {
    console.error('스마트워치 연결 오류:', err);
    throw err;
  }
};

export const listenToSmartWatchData = (callback: (data: Partial) => void) => {
  dataUpdateCallback = callback;
};

// 심박수 서비스 연결 및 모니터링
const connectHeartRateService = async (server: BluetoothRemoteGATTServer) => {
  try {
    const service = await server.getPrimaryService('heart_rate');
    const characteristic = await service.getCharacteristic('heart_rate_measurement');
    
    // 심박수 데이터 변경 모니터링
    await characteristic.startNotifications();
    characteristic.addEventListener('characteristicvaluechanged', handleHeartRateData);
  } catch (err) {
    console.error('심박수 서비스 연결 오류:', err);
    throw err;
  }
};

// 심박수 데이터 처리 함수
const handleHeartRateData = (event: Event) => {
  const characteristic = event.target as BluetoothRemoteGATTCharacteristic;
  const value = characteristic.value;
  if (!value) return;
  
  // 심박수 데이터 파싱
  const flags = value.getUint8(0);
  const heartRateFormat = flags & 0x01; // 0: UINT8, 1: UINT16
  
  let heartRate: number;
  if (heartRateFormat === 0) {
    heartRate = value.getUint8(1);
  } else {
    heartRate = value.getUint16(1, true);
  }
  
  // ECG 데이터가 포함되어 있는 경우 처리
  let ecgData: number[] | null = null;
  if (value.byteLength > (heartRateFormat === 0 ? 2 : 3)) {
    ecgData = [];
    for (let i = heartRateFormat === 0 ? 2 : 3; i  {
  const { data, isConnected } = useSmartWatch();
  const [ecgData, setEcgData] = useState([]);
  const [ecgStatus, setEcgStatus] = useState('checking');
  const [isRecording, setIsRecording] = useState(false);
  const [recordDuration, setRecordDuration] = useState(0);
  const recordingTimerRef = useRef(null);
  const { toast } = useToast();
  
  // 심전도 데이터 갱신
  useEffect(() => {
    if (data.ecgData) {
      setEcgData(prevData => {
        // 최대 300개 데이터 포인트 유지 (약 30초)
        const newData = [...prevData, ...data.ecgData];
        return newData.length > 300 ? newData.slice(-300) : newData;
      });
      
      // 상태 분석
      if (ecgData.length >= 100) {
        const status = analyzeECG(ecgData);
        setEcgStatus(status);
        
        // 위험 상태일 경우 알림
        if (status === 'critical' && !isRecording) {
          toast({
            title: '심전도 이상 감지',
            description: '심각한 심전도 이상이 감지되었습니다. 측정을 기록하세요.',
            variant: 'destructive',
          });
        }
      }
    }
  }, [data.ecgData]);
  
  // 녹화 타이머
  useEffect(() => {
    if (isRecording) {
      recordingTimerRef.current = window.setInterval(() => {
        setRecordDuration(prev => prev + 1);
      }, 1000);
    } else {
      if (recordingTimerRef.current) {
        window.clearInterval(recordingTimerRef.current);
        recordingTimerRef.current = null;
      }
      setRecordDuration(0);
    }
    
    return () => {
      if (recordingTimerRef.current) {
        window.clearInterval(recordingTimerRef.current);
      }
    };
  }, [isRecording]);
  
  const startRecording = () => {
    setIsRecording(true);
    toast({
      title: '심전도 기록 시작',
      description: '심전도 기록을 시작합니다. 측정 중 움직이지 마세요.',
    });
  };
  
  const stopRecording = async () => {
    setIsRecording(false);
    
    // 서버에 데이터 저장
    try {
      await saveEcgRecording({
        data: ecgData,
        duration: recordDuration,
        status: ecgStatus,
        timestamp: new Date().toISOString(),
      });
      
      toast({
        title: '심전도 기록 완료',
        description: `${recordDuration}초 동안의 심전도 기록이 저장되었습니다.`,
        variant: 'success',
      });
    } catch (err) {
      toast({
        title: '기록 저장 실패',
        description: '심전도 기록을 저장하는 중 오류가 발생했습니다.',
        variant: 'destructive',
      });
    }
  };
  
  // 차트 데이터 및 렌더링 코드...
};
```

### 산소포화도(PPG) 모니터링 컴포넌트 (PPGMonitor.tsx)

혈중 산소포화도 데이터를 실시간으로 시각화하고 분석하는 컴포넌트입니다.

```tsx
import React, { useEffect, useState } from 'react';
import { useSmartWatch } from '@/contexts/SmartWatchContext';
import { Card } from '@/components/ui/card';
import { Activity, Check, AlertTriangle, AlertCircle } from 'lucide-react';
import { Line } from 'react-chartjs-2';
import { useToast } from '@/lib/use-toast';
import { analyzePPG } from '@/lib/ppgAnalyzer';

type PPGStatus = 'normal' | 'warning' | 'critical' | 'checking';

const PPGMonitor = () => {
  const { data, isConnected } = useSmartWatch();
  const [ppgData, setPpgData] = useState([]);
  const [ppgStatus, setPpgStatus] = useState('checking');
  const { toast } = useToast();
  
  // 산소포화도 데이터 갱신
  useEffect(() => {
    if (data.ppgData) {
      setPpgData(prevData => {
        const newData = [...prevData, ...data.ppgData];
        return newData.length > 300 ? newData.slice(-300) : newData;
      });
      
      // 상태 분석
      if (ppgData.length >= 100) {
        const status = analyzePPG(ppgData, data.oxygenLevel || 0);
        setPpgStatus(status);
        
        // 위험 상태일 경우 알림
        if (status === 'critical') {
          toast({
            title: '산소포화도 위험',
            description: '산소포화도가 매우 낮습니다. 즉시 의료진에게 연락하세요.',
            variant: 'destructive',
          });
        }
      }
    }
  }, [data.ppgData, data.oxygenLevel]);
  
  // 상태 표시 및 차트 렌더링 코드...
};
```

### 메인 모니터링 페이지 (VitalSignsMonitoring.tsx)

여러 건강 지표를 통합적으로 모니터링하는 메인 페이지입니다.

```tsx
import React, { useState, useEffect } from 'react';
import { useSmartWatch } from '@/contexts/SmartWatchContext';
import SmartWatchConnector from '@/components/smartwatch/SmartWatchConnector';
import ECGMonitor from '@/components/monitoring/ECGMonitor';
import PPGMonitor from '@/components/monitoring/PPGMonitor';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Activity, Heart, Thermometer, Clock, Phone } from 'lucide-react';
import ModeSwitcher from '@/components/ModeSwitcher';
import { useToast } from '@/lib/use-toast';
import { analyzeHealthData } from '@/lib/api';

interface AiAnalysisResult {
  timestamp: string;
  riskScore: number;
  summary: string;
  recommendation: string;
}

const VitalSignsMonitoring = () => {
  const { data, isConnected } = useSmartWatch();
  const [showEmergencyCall, setShowEmergencyCall] = useState(false);
  const [aiAnalysisResult, setAiAnalysisResult] = useState(null);
  const { toast } = useToast();
  
  // 일정 시간마다 AI 분석 실행
  useEffect(() => {
    if (!isConnected) return;
    
    const interval = setInterval(async () => {
      await performAIAnalysis();
    }, 60000); // 1분마다 분석
    
    return () => clearInterval(interval);
  }, [isConnected, data]);
  
  // AI 분석 실행
  const performAIAnalysis = async () => {
    try {
      const result = await analyzeHealthData({
        heartRate: data.heartRate,
        oxygenLevel: data.oxygenLevel,
        temperature: data.temperature,
        ecgData: data.ecgData?.slice(-100),
        ppgData: data.ppgData?.slice(-100),
      });
      
      setAiAnalysisResult({
        timestamp: new Date().toISOString(),
        riskScore: result.riskScore,
        summary: result.summary,
        recommendation: result.recommendation,
      });
      
      // 위험도가 높으면 알림
      if (result.riskScore > 70) {
        toast({
          title: '건강 위험 감지',
          description: result.summary,
          variant: 'destructive',
        });
        setShowEmergencyCall(true);
      }
    } catch (err) {
      console.error('AI 분석 오류:', err);
    }
  };
  
  const handleEmergencyCall = () => {
    window.location.href = 'tel:119';
  };
  
  return (
    
      
        실시간 모니터링
        심전도, 산소포화도 등 실시간 건강 데이터를 모니터링합니다.
      
      
      
        
      
      
      
        
        
        
        {/* 추가 건강 데이터 */}
        
          
            기타 건강 데이터
          
          
          
            
              
                
                심박수
              
              {data.heartRate || '--'}
              bpm
            
            
            
              
                
                체온
              
              {data.temperature?.toFixed(1) || '--'}
              °C
            
            
            
              
                
                측정 시간
              
              
                {data.lastUpdated ? new Date(data.lastUpdated).toLocaleTimeString() : '--:--'}
              
            
          
        
        
        {/* AI 분석 결과 및 응급 전화 UI 생략... */}
      
    
  );
};
```

## 백엔드 구현

### 서버 메인 파일 (server/index.ts)

Express 서버와 WebSocket 연결을 설정합니다.

```typescript
import express from 'express';
import session from 'express-session';
import { createClient } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import connectPgSimple from 'connect-pg-simple';
import passport from 'passport';
import { Strategy as LocalStrategy } from 'passport-local';
import { WebSocketServer } from 'ws';
import path from 'path';
import { fileURLToPath } from 'url';
import { config } from './config';
import { userRoutes } from './routes/userRoutes';
import { healthDataRoutes } from './routes/healthDataRoutes';
import { smartwatchRoutes } from './routes/smartwatchRoutes';
import { errorHandler } from './middleware/errorMiddleware';
import { User } from '../shared/schema';
import { userService } from './services/userService';

// 초기화 코드 생략...

// 데이터베이스 연결
const sql = createClient({
  connectionString: config.databaseUrl,
});
await sql.connect();
export const db = drizzle(sql);

// Express 앱 설정
const app = express();
const PgSession = connectPgSimple(session);

// 미들웨어 설정
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// 세션 및 인증 설정
app.use(session({
  store: new PgSession({
    pool: sql,
    tableName: 'session',
  }),
  secret: config.sessionSecret,
  resave: false,
  saveUninitialized: false,
  cookie: {
    maxAge: 30 * 24 * 60 * 60 * 1000, // 30일
    secure: isProduction,
  },
}));

app.use(passport.initialize());
app.use(passport.session());

// Passport 전략 설정
passport.use(new LocalStrategy(async (username, password, done) => {
  try {
    const user = await userService.verifyUser(username, password);
    if (!user) return done(null, false);
    return done(null, user);
  } catch (err) {
    return done(err);
  }
}));

// API 라우트
app.use('/api/users', userRoutes);
app.use('/api/health-data', healthDataRoutes);
app.use('/api/smartwatch', smartwatchRoutes);

// 정적 파일 제공 (프로덕션 환경)
if (isProduction) {
  app.use(express.static(path.join(__dirname, '../client')));
  
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../client/index.html'));
  });
}

// 에러 핸들러
app.use(errorHandler);

// HTTP 서버 시작
const server = app.listen(PORT, () => {
  console.log(`🚀 서버가 http://localhost:${PORT}에서 실행 중입니다.`);
});

// WebSocket 서버 설정
const wss = new WebSocketServer({ server });

wss.on('connection', (ws) => {
  console.log('WebSocket 클라이언트가 연결되었습니다.');
  
  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message.toString());
      
      // 실시간 건강 데이터 처리
      if (data.type === 'health_data') {
        // 다른 클라이언트에게 브로드캐스트
        wss.clients.forEach((client) => {
          if (client !== ws && client.readyState === ws.OPEN) {
            client.send(JSON.stringify({
              type: 'health_data_update',
              data: data.data,
            }));
          }
        });
      }
    } catch (err) {
      console.error('WebSocket 메시지 처리 오류:', err);
    }
  });
});
```

### 스마트워치 라우트 (smartwatchRoutes.ts)

스마트워치 데이터 처리를 위한 API 엔드포인트를 정의합니다.

```typescript
import express from 'express';
import { smartwatchController } from '../controllers/smartwatchController';
import { authMiddleware } from '../middleware/auth';

const router = express.Router();

// 스마트워치 데이터 수신
router.post('/data', authMiddleware, smartwatchController.receiveData);

// 스마트워치 ECG 데이터 저장
router.post('/ecg', authMiddleware, smartwatchController.saveEcgRecording);

// 스마트워치 기록 조회
router.get('/records', authMiddleware, smartwatchController.getRecords);

// 특정 기록 상세 조회
router.get('/records/:id', authMiddleware, smartwatchController.getRecordById);

// 건강 데이터 분석
router.post('/analyze', authMiddleware, smartwatchController.analyzeHealthData);

export const smartwatchRoutes = router;
```

### 스마트워치 컨트롤러 (smartwatchController.ts)

스마트워치 데이터를 처리하고 분석하는 핵심 로직을 구현합니다.

```typescript
import { Request, Response, NextFunction } from 'express';
import { smartwatchService } from '../services/smartwatchService';
import { healthDataService } from '../services/healthDataService';
import { analyzeECGData, analyzePPGData } from '../utils/healthDataAnalyzer';

export const smartwatchController = {
  // 스마트워치 데이터 수신
  async receiveData(req: Request, res: Response, next: NextFunction) {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({ error: '인증되지 않은 사용자입니다.' });
      }
      
      const healthData = req.body;
      
      // 데이터 유효성 검사
      if (!healthData) {
        return res.status(400).json({ error: '유효하지 않은 데이터입니다.' });
      }
      
      // 건강 데이터 저장
      const savedData = await healthDataService.saveHealthData({
        userId,
        ...healthData,
      });
      
      res.status(201).json(savedData);
    } catch (err) {
      next(err);
    }
  },
  
  // ECG 기록 저장
  async saveEcgRecording(req: Request, res: Response, next: NextFunction) {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({ error: '인증되지 않은 사용자입니다.' });
      }
      
      const { data, duration, status, timestamp } = req.body;
      
      // 데이터 유효성 검사
      if (!data || !Array.isArray(data)) {
        return res.status(400).json({ error: '유효하지 않은 ECG 데이터입니다.' });
      }
      
      // ECG 분석 수행
      const analysis = await analyzeECGData(data);
      
      // ECG 기록 저장
      const savedRecording = await smartwatchService.saveEcgRecording({
        userId,
        data,
        duration,
        abnormalities: analysis.abnormalities,
        analysis: {
          status,
          details: analysis.details,
          recommendations: analysis.recommendations,
        },
      });
      
      // 이상이 감지되면 알림 생성
      if (analysis.abnormalities && analysis.abnormalities.length > 0) {
        await smartwatchService.createAlert({
          userId,
          alertType: status === 'critical' ? 'risk' : 'warning',
          message: `ECG 이상이 감지되었습니다: ${analysis.abnormalities.join(', ')}`,
          ecgRecordingId: savedRecording.id,
        });
      }
      
      res.status(201).json(savedRecording);
    } catch (err) {
      next(err);
    }
  },
  
  // 건강 데이터 분석
  async analyzeHealthData(req: Request, res: Response, next: NextFunction) {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({ error: '인증되지 않은 사용자입니다.' });
      }
      
      const { heartRate, oxygenLevel, temperature, ecgData, ppgData } = req.body;
      
      // 사용자 정보 가져오기
      const user = await smartwatchService.getUserInfo(userId);
      
      // ECG 및 PPG 데이터 분석
      const ecgAnalysis = ecgData ? await analyzeECGData(ecgData) : null;
      const ppgAnalysis = ppgData ? await analyzePPGData(ppgData, oxygenLevel) : null;
      
      // 종합 위험도 분석
      const analysis = await smartwatchService.performComprehensiveAnalysis({
        userId,
        user,
        heartRate,
        oxygenLevel,
        temperature,
        ecgAnalysis,
        ppgAnalysis,
      });
      
      // 분석 결과 저장
      await smartwatchService.saveAnalysisResult(userId, analysis);
      
      // 위험도가 높으면 알림 생성
      if (analysis.riskScore > 70) {
        await smartwatchService.createAlert({
          userId,
          alertType: 'risk',
          message: `높은 위험도가 감지되었습니다: ${analysis.summary}`,
        });
      }
      
      res.json(analysis);
    } catch (err) {
      next(err);
    }
  },
  
  // 기록 조회 함수들 생략...
};
```

### 건강 데이터 분석 유틸리티 (healthDataAnalyzer.ts)

ECG 및 PPG 데이터를 분석하는 알고리즘을 구현합니다.

```typescript
// ECG 데이터 분석
export const analyzeECGData = async (ecgData: number[]) => {
  try {
    // RR 간격 계산 (R-peak 사이의 간격)
    const rPeaks = findRPeaks(ecgData);
    const rrIntervals = calculateRRIntervals(rPeaks);
    
    // 부정맥 감지
    const hasArrhythmia = detectArrhythmia(rrIntervals);
    
    // ST 분절 변화 감지 (허혈/심근경색 관련)
    const stSegmentChange = detectSTSegmentChange(ecgData);
    
    // 이상 유형 목록
    const abnormalities = [];
    let status = 'normal';
    
    if (hasArrhythmia) {
      abnormalities.push('부정맥');
      status = 'warning';
    }
    
    if (stSegmentChange > 0.2) {
      abnormalities.push('ST 분절 상승');
      status = 'critical';
    } else if (stSegmentChange  threshold && ecgData[i] > ecgData[i-1] && ecgData[i] > ecgData[i+1]) {
      rPeaks.push(i);
    }
  }
  
  return rPeaks;
}

// 기타 분석 함수들 생략...
```

### 스마트워치 서비스 (smartwatchService.ts)

건강 데이터 처리와 위험도 분석을 담당하는 서비스 계층을 구현합니다.

```typescript
import { db } from '../index';
import { 
  ecgRecordings, 
  alerts, 
  aiAnalyses, 
  users,
  healthData,
} from '../../shared/schema';
import { eq } from 'drizzle-orm';

export const smartwatchService = {
  // ECG 기록 저장
  async saveEcgRecording(data) {
    const [result] = await db.insert(ecgRecordings).values(data).returning();
    return result;
  },
  
  // 알림 생성
  async createAlert(data) {
    const [result] = await db.insert(alerts).values(data).returning();
    return result;
  },
  
  // 종합 위험도 분석
  async performComprehensiveAnalysis(input) {
    const { 
      userId, 
      user, 
      heartRate, 
      oxygenLevel, 
      temperature, 
      ecgAnalysis, 
      ppgAnalysis 
    } = input;
    
    // 기본 위험도 점수
    let riskScore = 0;
    const factors = [];
    
    // 심박수 분석
    if (heartRate !== null && heartRate !== undefined) {
      // 나이별 정상 심박수 범위 계산
      const age = user.age || 30;
      const maxNormalHeartRate = 220 - age;
      const minNormalHeartRate = 60;
      
      if (heartRate > maxNormalHeartRate * 0.85) {
        riskScore += 15;
        factors.push('심박수 상승');
      } else if (heartRate = 70) {
      summary = `심각한 건강 위험이 감지되었습니다: ${factors.join(', ')}`;
      recommendation = '즉시 의료진에게 연락하거나 응급실을 방문하세요.';
    } else if (riskScore >= 40) {
      summary = `건강 이상이 감지되었습니다: ${factors.join(', ')}`;
      recommendation = '의사와 상담하고 상태를 계속 모니터링하세요.';
    } else {
      summary = factors.length ? `경미한 이상이 감지되었습니다: ${factors.join(', ')}` : '정상 범위 내의 건강 상태입니다.';
      recommendation = '정기적으로 건강을 모니터링하세요.';
    }
    
    return {
      riskScore,
      factors,
      summary,
      recommendation,
      timestamp: new Date().toISOString(),
    };
  },
  
  // 기타 서비스 함수들...
};
```

## 연동 및 통신 모듈

### API 클라이언트 (api.ts)

프론트엔드와 백엔드 간의 통신을 담당하는 API 클라이언트를 구현합니다.

```typescript
// 기본 API 요청 함수
async function request(url: string, options?: RequestInit): Promise {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include', // 쿠키 포함
      ...options,
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.error || `API 요청 실패: ${response.status}`);
    }
    
    return await response.json();
  } catch (err) {
    console.error('API 요청 오류:', err);
    throw err;
  }
}

// 건강 데이터 저장
export async function saveHealthData(data: any) {
  return request('/api/health-data', {
    method: 'POST',
    body: JSON.stringify(data),
  });
}

// ECG 기록 저장
export async function saveEcgRecording(data: any) {
  return request('/api/smartwatch/ecg', {
    method: 'POST',
    body: JSON.stringify(data),
  });
}

// 건강 데이터 분석
export async function analyzeHealthData(data: any) {
  return request('/api/smartwatch/analyze', {
    method: 'POST',
    body: JSON.stringify(data),
  });
}

// WebSocket 연결
export function connectWebSocket(
  onMessage: (data: any) => void,
  onOpen?: () => void,
  onClose?: () => void,
  onError?: (error: Event) => void
) {
  const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
  const wsUrl = `${protocol}//${window.location.host}/ws`;
  
  const socket = new WebSocket(wsUrl);
  
  socket.onopen = () => {
    console.log('WebSocket 연결 성공');
    if (onOpen) onOpen();
  };
  
  socket.onmessage = (event) => {
    try {
      const data = JSON.parse(event.data);
      onMessage(data);
    } catch (err) {
      console.error('WebSocket 메시지 파싱 오류:', err);
    }
  };
  
  // 기타 이벤트 핸들러...
  
  return {
    send: (data: any) => {
      if (socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify(data));
      }
    },
    close: () => {
      socket.close();
    },
  };
}
```

## 결론

이 보고서에서는 스마트워치 연동을 통한 심전도, 산소포화도 등을 모니터링할 수 있는 건강 모니터링 시스템의 전체 코드 구현을 제시했습니다. 주요 구현 내용은 다음과 같습니다:

1. Web Bluetooth API를 활용한 스마트워치 연결 및 데이터 수집 기능
2. 실시간 심전도(ECG) 및 산소포화도(PPG) 모니터링 및 시각화
3. 건강 데이터 분석 알고리즘을 통한 이상 징후 감지
4. 위험 상황 감지 시 알림 및 응급 연락 기능
5. 건강 데이터 저장 및 분석을 위한 백엔드 API

이 시스템은 사용자의 건강 상태를 실시간으로 모니터링하고, 잠재적인 건강 문제를 조기에 발견하여 적절한 의료 조치를 취할 수 있도록 도와줍니다. 스마트워치와 같은 웨어러블 기기의 대중화로 이러한 건강 모니터링 시스템은 앞으로 더욱 중요해질 것으로 예상됩니다.

실제 의료 목적으로 사용하기 위해서는 더 정밀한 분석 알고리즘과 의료 전문가의 검증이 필요하며, 다양한 스마트워치 기기의 호환성을 고려한 추가 개발이 필요합니다.

Citations:
[1] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/53686762/66747649-0ac1-4184-9399-d8909e70d21f/package.json
[2] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/53686762/f56057c4-954d-4587-bccc-d0052ba8f74d/README.md
[3] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/53686762/a0ff43b4-461a-4fd4-8cd2-412388cadc07/schema.ts
[4] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/53686762/f5119395-45ff-4576-bb5c-15d8571cd555/index.css
[5] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/53686762/63d038c8-fb5d-4638-90c8-ab1e143bc213/VitalSignsMonitoring.tsx
[6] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/53686762/39238153-0907-4d03-a19b-0fe8ab5d5685/use-toast.ts
[7] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/53686762/1686f176-86d2-4044-b7ba-b0d57be49db0/ModeSwitcher.tsx
[8] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/53686762/4f6c72ac-237e-479c-a930-719ac58d9a10/AppLayout.tsx
[9] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/53686762/3a3e75b2-3616-4665-8147-3af42cdc9f84/BottomNavigation.tsx

---
Perplexity로부터의 답변: pplx.ai/share