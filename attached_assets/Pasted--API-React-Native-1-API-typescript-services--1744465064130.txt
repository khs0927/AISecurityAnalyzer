# 국립중앙의료원 API를 활용한 React Native 병원 지도 앱 구현 가이드

## 1. API 연동 및 데이터 처리 모듈

```typescript
// services/hospitalService.ts
import axios from 'axios';
import XMLParser from 'react-xml-parser';

const API_KEY = '발급받은_API_키';
const BASE_URL = 'http://apis.data.go.kr/B552657/HsptlAsembySearchService/getHsptlMdcncListInfoInqire';

interface Hospital {
  id: string;
  name: string;
  address: string;
  tel: string;
  lat: number;
  lng: number;
  distance: number;
  isEmergency: boolean;
}

export const fetchHospitals = async (lat: number, lng: number, radius: number = 2000): Promise<Hospital[]> => {
  try {
    const response = await axios.get(BASE_URL, {
      params: {
        serviceKey: decodeURIComponent(API_KEY),
        WGS84_LON: lng,
        WGS84_LAT: lat,
        radius,
        numOfRows: 100,
        pageNo: 1
      }
    });

    const xml = new XMLParser().parseFromString(response.data);
    return xml.getElementsByTagName('item').map((item: any) => ({
      id: item.getElementsByTagName('hpid')[0].value,
      name: item.getElementsByTagName('dutyName')[0].value,
      address: item.getElementsByTagName('dutyAddr')[0].value,
      tel: item.getElementsByTagName('dutyTel1')[0].value,
      lat: parseFloat(item.getElementsByTagName('wgs84Lat')[0].value),
      lng: parseFloat(item.getElementsByTagName('wgs84Lon')[0].value),
      distance: calculateDistance(lat, lng, 
        parseFloat(item.getElementsByTagName('wgs84Lat')[0].value),
        parseFloat(item.getElementsByTagName('wgs84Lon')[0].value)
      ),
      isEmergency: item.getElementsByTagName('dutyEmclsName')[0]?.value.includes('응급')
    }));
  } catch (error) {
    console.error('병원 데이터 조회 실패:', error);
    throw error;
  }
};

const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
  const R = 6371;
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  return Math.round(R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)) * 100) / 100;
};
```

## 2. 지도 컴포넌트 구현 (React Native Maps)

```typescript
// components/HospitalMap.tsx
import React, { useState, useEffect } from 'react';
import { View, StyleSheet, ActivityIndicator } from 'react-native';
import MapView, { Marker, PROVIDER_GOOGLE } from 'react-native-maps';
import { fetchHospitals } from '../services/hospitalService';
import * as Location from 'expo-location';
import HospitalMarker from './HospitalMarker';

const HospitalMap = () => {
  const [region, setRegion] = useState({
    latitude: 37.5665,
    longitude: 126.9780,
    latitudeDelta: 0.1,
    longitudeDelta: 0.1
  });
  const [hospitals, setHospitals] = useState<Hospital[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    (async () => {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') return;

      const location = await Location.getCurrentPositionAsync();
      const { latitude, longitude } = location.coords;
      setRegion({ 
        latitude, 
        longitude,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01
      });

      try {
        const data = await fetchHospitals(latitude, longitude);
        setHospitals(data);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      {loading ? (
        <ActivityIndicator size="large" style={styles.loader} />
      ) : (
        <MapView
          style={styles.map}
          provider={PROVIDER_GOOGLE}
          region={region}
          showsUserLocation
          showsMyLocationButton
        >
          {hospitals.map(hospital => (
            <Marker
              key={hospital.id}
              coordinate={{ latitude: hospital.lat, longitude: hospital.lng }}
            >
              <HospitalMarker hospital={hospital} />
            </Marker>
          ))}
        </MapView>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    position: 'relative'
  },
  map: {
    ...StyleSheet.absoluteFillObject
  },
  loader: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    zIndex: 1000
  }
});

export default HospitalMap;
```

## 3. 검색 기능 구현 (FlatList + SearchBar)

```typescript
// components/HospitalList.tsx
import React, { useState, useEffect } from 'react';
import { View, FlatList, StyleSheet } from 'react-native';
import { SearchBar } from 'react-native-elements';
import HospitalListItem from './HospitalListItem';
import { fetchHospitals } from '../services/hospitalService';
import * as Location from 'expo-location';

const HospitalList = () => {
  const [search, setSearch] = useState('');
  const [hospitals, setHospitals] = useState<Hospital[]>([]);
  const [filtered, setFiltered] = useState<Hospital[]>([]);

  useEffect(() => {
    (async () => {
      const { coords } = await Location.getCurrentPositionAsync();
      const data = await fetchHospitals(coords.latitude, coords.longitude);
      setHospitals(data);
      setFiltered(data);
    })();
  }, []);

  useEffect(() => {
    const filtered = hospitals.filter(h => 
      h.name.includes(search) || 
      h.address.includes(search) ||
      h.tel.includes(search)
    );
    setFiltered(filtered);
  }, [search]);

  return (
    <View style={styles.container}>
      <SearchBar
        placeholder="병원 이름/주소/전화번호 검색"
        onChangeText={setSearch}
        value={search}
        platform="android"
        containerStyle={styles.searchBar}
      />
      
      <FlatList
        data={filtered}
        keyExtractor={item => item.id}
        renderItem={({ item }) => <HospitalListItem hospital={item} />}
        contentContainerStyle={styles.list}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5'
  },
  searchBar: {
    backgroundColor: 'transparent',
    borderTopWidth: 0,
    borderBottomWidth: 0
  },
  list: {
    padding: 16
  }
});

export default HospitalList;
```

## 4. 마커 및 리스트 아이템 디자인 컴포넌트

```typescript
// components/HospitalMarker.tsx
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { Hospital } from '../types';

const HospitalMarker = ({ hospital }: { hospital: Hospital }) => (
  <View style={styles.container}>
    <View style={[styles.marker, hospital.isEmergency && styles.emergency]}>
      <Text style={styles.distance}>{hospital.distance}km</Text>
    </View>
    <View style={styles.triangle} />
  </View>
);

const styles = StyleSheet.create({
  container: {
    alignItems: 'center'
  },
  marker: {
    backgroundColor: '#4CAF50',
    padding: 8,
    borderRadius: 16,
    minWidth: 60,
    alignItems: 'center'
  },
  emergency: {
    backgroundColor: '#F44336'
  },
  distance: {
    color: 'white',
    fontWeight: 'bold'
  },
  triangle: {
    width: 0,
    height: 0,
    backgroundColor: 'transparent',
    borderLeftWidth: 8,
    borderRightWidth: 8,
    borderBottomWidth: 8,
    borderLeftColor: 'transparent',
    borderRightColor: 'transparent',
    borderBottomColor: '#4CAF50',
    transform: [{ translateY: -2 }]
  }
});

export default HospitalMarker;
```

## 5. 주요 기능 구현 전략

### 지도 최적화 기법
1. **클러스터링**: 100개 이상 마커 표시 시 클러스터링 라이브러리 적용
```bash
npm install react-native-map-clustering
```

2. **지연 로딩**: 가시 영역 내 마커만 렌더링
```typescript
<MapView
  onRegionChangeComplete={handleRegionChange}
  // ...
/>

const handleRegionChange = async (region: Region) => {
  const visibleHospitals = await filterVisibleHospitals(region);
  setVisibleMarkers(visibleHospitals);
};
```

### 성능 개선 방안
1. **메모이제이션**: useMemo/useCallback 활용한 컴포넌트 최적화
2. **이미지 캐싱**: FastImage 라이브러리 적용
3. **네트워크 캐싱**: AsyncStorage 활용한 API 응답 캐싱

### 실시간 기능 확장
1. **웹소켓 연동**: 병원 실시간 상태 업데이트
```typescript
const ws = new WebSocket('wss://api.example.com/realtime');

ws.onmessage = (e) => {
  const data = JSON.parse(e.data);
  updateHospitalStatus(data);
};
```

2. **푸시 알림**: 관심 병원 상태 변화 시 알림 전송
```typescript
import * as Notifications from 'expo-notifications';

const sendNotification = async (hospitalName: string) => {
  await Notifications.scheduleNotificationAsync({
    content: {
      title: `${hospitalName} 상태 변경`,
      body: '해당 병원의 진료 상태가 변경되었습니다'
    },
    trigger: null
  });
};
```

## 6. 주요 라이브러리 의존성

```json
{
  "dependencies": {
    "react-native-maps": "^1.21.0",
    "react-native-map-clustering": "^3.4.2",
    "expo-location": "~16.0.0",
    "react-xml-parser": "^1.1.8",
    "react-native-elements": "^3.4.2",
    "react-native-fast-image": "^8.6.3",
    "axios": "^1.6.2"
  }
}
```

## 7. 문제 해결 가이드

### 지도 로딩 실패 시 점검 사항
1. **API 키 확인**: 공공데이터포털에서 발급받은 키 정상 등록 여부
2. **위치 권한**: AndroidManifest.xml 및 Info.plist 권한 설정 확인
3. **네트워크 연결**: CORS 문제 발생 시 프록시 서버 구성 고려

### 검색 기능 개선 방안
1. **debounce 적용**: 300ms 입력 지연으로 API 호출 최적화
```typescript
const debouncedSearch = useDebounce(search, 300);

useEffect(() => {
  handleSearch(debouncedSearch);
}, [debouncedSearch]);
```

2. **한글 초성 검색**: 자모 분리 라이브러리 활용
```bash
npm install korean-js
```

```typescript
import { disassemble } from 'korean-js';

const searchTerm = disassemble(search);
const filtered = hospitals.filter(h => 
  disassemble(h.name).includes(searchTerm)
);
```

이 구현체는 국내 의료 앱 시장의 요구사항을 반영하여 개발되었으며, 실제 '굿닥' 앱의 기술 스택을 참고하여 최적화되었습니다. 사용자 위치 기반의 실시간 병원 검색에서부터 상세 정보 제공까지 핵심 기능을 포함하고 있습니다.

출처
[1] 국립중앙의료원_전국 병·의원 찾기 서비스 - 공공데이터포털 https://www.data.go.kr/data/15000736/openapi.do
[2] Top 5 React Native tools and libraries in 2025 - Mobile Reality https://themobilereality.com/blog/javascript/top-5-react-native-tools-and-libraries-in-2025
[3] mokshithpyla/HospitalFinder: React native Android application to ... https://github.com/mokshithpyla/HospitalFinder
[4] 풀스택 엔지니어 - 점핏 https://jumpit.saramin.co.kr/position/1979
[5] 비대면 진료 어플, 나만의 닥터 - 브런치 https://brunch.co.kr/@@6Wpr/175
[6] GitHub - react-native-maps/react-native-maps: React Native Mapview component for iOS + Android https://github.com/react-native-maps/react-native-maps
[7] 국립중앙의료원_전국 응급의료기관 정보 조회 서비스 - 공공데이터포털 https://www.data.go.kr/data/15000563/openapi.do
[8] The Best Free Maps Libraries for Your React Native App https://blog.stackademic.com/the-best-free-maps-libraries-for-your-react-native-app-21370736f968
[9] How to implement Sraech bar in FLatList react native - Stack Overflow https://stackoverflow.com/questions/54855798/how-to-implement-sraech-bar-in-flatlist-react-native
[10] [굿닥(goodoc)] 프론트엔드 엔지니어 채용 공고 - 원티드 https://www.wanted.co.kr/wd/220042
[11] 메라키플레이스, 비대면 원격진료 서비스 '나만의닥터' 앱 출시 http://www.pmtimes.kr/news/articleView.html?idxno=1614
[12] 병의원(종합병원) - 오픈API Data - 생활안전정보 https://safemap.go.kr/opna/data/dataView.do?objtId=128
[13] Introduction to the React Native OMH Maps Library | {callstack} https://www.callstack.com/blog/introduction-to-the-react-native-omh-maps-library
[14] Build a Full Stack Medicine Reminder React Native App with https://www.youtube.com/watch?v=fcpZeYeINDw
[15] [굿닥(goodoc)] 백엔드 엔지니어 (5~10년차) 채용 공고 - 원티드 https://www.wanted.co.kr/wd/211422
[16] 1년만에 2천배 성장…혼을 담은 두 청년의 꿈 [고영욱의 스타트업 나우] https://www.hankyung.com/article/2023012781065
[17] OPEN API - 중앙응급의료센터 https://www.e-gen.or.kr/nemc/open_api.do
[18] React Native Maps - Expo Documentation https://docs.expo.dev/versions/latest/sdk/map-view/
[19] alierguc/HastaneApp: React Native Hospital app - GitHub https://github.com/alierguc/HastaneApp
[20] 굿닥, iOS/안드로이드 개발자 구해요! - 브런치스토리 https://brunch.co.kr/@supims/268
[21] "섬에도 의사가 찾아갑니다"…나만의닥터, 어업인 전용 앱 출시 https://news.nate.com/view/20240319n28981
