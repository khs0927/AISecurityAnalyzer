# 의약품 API 연동을 위한 React Native 코드 솔루션

본 보고서는 공공데이터포털에서 제공하는 의약품정보 API를 React Native 애플리케이션에 통합하는 방법에 대한 종합적인 가이드를 제공합니다. 특히 CORS(Cross-Origin Resource Sharing) 이슈를 해결하기 위한 여러 접근 방식을 제시합니다.

## API 연동 문제의 이해

공공데이터포털의 "식품의약품안전처_의약품개요정보(e약은요)" API를 React Native 애플리케이션에 연동할 때 CORS 관련 문제가 발생하고 있습니다. 이는 브라우저 환경(React Native Web 또는 개발 환경)에서 특히 두드러집니다. API 엔드포인트가 HTTP 프로토콜(http://apis.data.go.kr)을 사용하는 반면, 많은 개발 환경은 HTTPS를 사용하기 때문에 발생하는 문제일 수 있습니다[4][8].

### 주요 이슈 확인
- API 엔드포인트는 HTTP 기반임: `http://apis.data.go.kr/1471000/DrbEasyDrugInfoService`
- API 키 등록 오류가 이전에 발생함: `SERVICE_KEY_IS_NOT_REGISTERED_ERROR (30)`
- React Native 환경에서 CORS 정책 제한으로 인한 데이터 접근 불가[11]

## API 연동 코드 구현

### 1. 기본 API 서비스 구현

다음은 React Native에서 의약품 API를 연동하기 위한 기본 서비스 코드입니다:

```typescript
// DrugApiService.ts
import { Platform } from 'react-native';
import RNFetchBlob from 'rn-fetch-blob';

// API 기본 정보
const API_BASE_URL = 'https://apis.data.go.kr/1471000/DrbEasyDrugInfoService';
const API_KEY = 't619sApoYD1s94RX8r8mk68mMtGPVT4qsKp7eG3e86b2tzDANPjoHscFR7C%2Fj60arJe3lMxEUhELK5o6avD3g%3D%3D';

// 약물 검색 결과 인터페이스
export interface DrugSearchResult {
  drugId: string;          // 약물 고유 ID
  name: string;            // 약물명
  manufacturer: string;    // 제조사
  type: string;            // 제형
  category: string;        // 분류
  imageUrl?: string;       // 약물 이미지 URL
  ingredients: string[];   // 성분 목록
}

// 약물 상세 정보 인터페이스
export interface DrugDetail extends DrugSearchResult {
  indication: string;      // 적응증
  dosage: string;          // 용법용량
  warnings: string[];      // 경고사항
  sideEffects: string[];   // 부작용
  interactions: DrugInteraction[]; // 상호작용
  pregnancyCategory?: string; // 임부 사용 등급
  storage: string;         // 보관 방법
}

// 약물 상호작용 인터페이스
export interface DrugInteraction {
  drugId: string;          // 상호작용 약물 ID
  drugName: string;        // 상호작용 약물명
  severity: 'minor' | 'moderate' | 'major' | 'contraindicated'; // 심각도
  description: string;     // 상호작용 설명
}

/**
 * CORS 이슈를 해결하는 API 호출 함수
 * RNFetchBlob을 사용하여 네이티브 환경에서 직접 호출
 */
const fetchApi = async (endpoint: string, params: Record) => {
  // 웹 환경인 경우 프록시 서버 사용
  if (Platform.OS === 'web') {
    // 프록시 서버를 통해 요청 (개발 환경)
    const proxyUrl = 'https://your-proxy-server.com/proxy';
    const searchParams = new URLSearchParams({
      url: `${API_BASE_URL}/${endpoint}`,
      ...params
    });
    
    const response = await fetch(`${proxyUrl}?${searchParams.toString()}`);
    return response.json();
  } else {
    // 네이티브 환경에서는 RNFetchBlob 사용
    try {
      const queryString = Object.entries(params)
        .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
        .join('&');
        
      const response = await RNFetchBlob.config({
        trusty: true, // CORS 이슈 해결을 위한 설정
      }).fetch(
        'GET',
        `${API_BASE_URL}/${endpoint}?${queryString}`,
        {
          'Accept': 'application/json'
        }
      );
      
      return response.json();
    } catch (error) {
      console.error('API 호출 오류:', error);
      throw error;
    }
  }
};

/**
 * 약물 검색
 */
export const searchDrugs = async (
  query: string,
  options?: {
    category?: string;
    manufacturer?: string;
    limit?: number;
  }
): Promise => {
  try {
    // 검색 파라미터 구성
    const params: Record = {
      serviceKey: API_KEY,
      type: 'json',
      pageNo: '1',
      numOfRows: String(options?.limit || 20),
      itemName: query
    };
    
    // API 요청 및 응답 처리
    const responseData = await fetchApi('getDrbEasyDrugList', params);
    
    // 응답 성공 여부 확인
    if (responseData.header && responseData.header.resultCode !== '00') {
      return {
        success: false,
        results: [],
        total: 0,
        error: responseData.header.resultMsg || '약물 검색 실패'
      };
    }
    
    // 결과가 없는 경우
    if (!responseData.body || !responseData.body.items || responseData.body.totalCount === 0) {
      return {
        success: true,
        results: [],
        total: 0
      };
    }
    
    // 결과가 단일 항목인 경우와 복수 항목인 경우 처리
    const items = Array.isArray(responseData.body.items) 
      ? responseData.body.items 
      : responseData.body.items.item 
        ? (Array.isArray(responseData.body.items.item) ? responseData.body.items.item : [responseData.body.items.item])
        : [];
    
    // API 응답 파싱
    const results: DrugSearchResult[] = items.map((item: any) => ({
      drugId: item.itemSeq || '',
      name: item.itemName || '',
      manufacturer: item.entpName || '',
      type: item.efcyQesitm || '',  // 효능 정보를 type으로 사용
      category: item.className || '',
      imageUrl: item.itemImage || '',
      ingredients: item.ingredientName ? [item.ingredientName] : []
    }));
    
    return {
      success: true,
      results,
      total: responseData.body.totalCount || results.length
    };
    
  } catch (error) {
    console.error('약물 검색 오류:', error);
    return {
      success: false,
      results: [],
      total: 0,
      error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'
    };
  }
};

/**
 * 약물 상세 정보 조회
 */
export const getDrugDetails = async (drugId: string): Promise => {
  try {
    // 검색 파라미터 구성
    const params: Record = {
      serviceKey: API_KEY,
      type: 'json',
      itemSeq: drugId
    };
    
    // API 요청 - 약물 상세 정보
    const data = await fetchApi('getDrbEasyDrugList', params);
    
    // 응답 처리 로직 (생략)
    // ... (이전 코드와 동일한 로직)
    
    // 임시 데이터로 대체
    const drugDetail: DrugDetail = {
      drugId: drugId,
      name: '약물 정보 예시',
      manufacturer: '제약회사',
      type: '정제',
      category: '일반의약품',
      ingredients: ['주성분1', '주성분2'],
      indication: '두통, 발열 등의 완화',
      dosage: '1일 3회, 1회 1정',
      warnings: ['경고사항 예시'],
      sideEffects: ['부작용 예시'],
      interactions: [],
      storage: '실온 보관'
    };
    
    return {
      success: true,
      data: drugDetail
    };
    
  } catch (error) {
    console.error('약물 상세 정보 조회 오류:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'
    };
  }
};
```

### 2. CORS 이슈 대응을 위한 프록시 서버 설정

React Native Web이나 개발 환경에서는 CORS 이슈가 발생할 수 있으므로, 다음과 같이 프록시 서버를 설정할 수 있습니다[14][15]:

```javascript
// setupProxy.js (React 개발 서버용)
const { createProxyMiddleware } = require('http-proxy-middleware');

module.exports = function(app) {
  app.use(
    '/api/drugs',
    createProxyMiddleware({
      target: 'http://apis.data.go.kr/1471000/DrbEasyDrugInfoService',
      changeOrigin: true,
      pathRewrite: {
        '^/api/drugs': ''
      },
      onProxyReq: (proxyReq, req, res) => {
        // API 키 추가
        const url = new URL(proxyReq.path, 'http://apis.data.go.kr');
        url.searchParams.append('serviceKey', 't619sApoYD1s94RX8r8mk68mMtGPVT4qsKp7eG3e86b2tzDANPjoHscFR7C%2Fj60arJe3lMxEUhELK5o6avD3g%3D%3D');
        proxyReq.path = url.pathname + url.search;
      }
    })
  );
};
```

### 3. 모바일 환경에서 rn-fetch-blob 설정

네이티브 모바일 환경에서는 rn-fetch-blob을 사용하여 CORS 이슈를 우회할 수 있습니다[8][11]:

```javascript
// package.json에 추가
// "rn-fetch-blob": "^0.12.0"

// iOS에서 Podfile에 추가
// pod 'rn-fetch-blob', :path => '../node_modules/rn-fetch-blob'

// 설치 명령어
// npm install --save rn-fetch-blob
// cd ios && pod install
```

## 오프라인 모드 및 로컬 데이터 구현

네트워크 문제나 CORS 이슈가 지속될 경우 로컬 데이터를 사용하는 방식으로 개발할 수 있습니다[2]:

```typescript
// LocalDrugData.ts
import { DrugSearchResult, DrugDetail } from './DrugApiService';

// 로컬 약물 데이터
export const localDrugData: DrugSearchResult[] = [
  {
    drugId: '200003354',
    name: '아스피린정100mg',
    manufacturer: '바이엘코리아',
    type: '혈전에 의한 질병의 예방',
    category: '해열진통소염제',
    imageUrl: 'https://nedrug.mfds.go.kr/pbp/cmn/itemImageDownload/147426748486800001',
    ingredients: ['아세틸살리실산']
  },
  {
    drugId: '200603627',
    name: '아스피린프로텍트정100mg',
    manufacturer: '바이엘코리아',
    type: '심근경색, 뇌경색의 예방',
    category: '항혈전제',
    imageUrl: 'https://nedrug.mfds.go.kr/pbp/cmn/itemImageDownload/147426748486800002',
    ingredients: ['아세틸살리실산']
  },
  {
    drugId: '199700342',
    name: '이지엔6애니타임',
    manufacturer: '대웅제약',
    type: '두통, 치통, 발열 등의 완화',
    category: '해열진통소염제',
    imageUrl: 'https://nedrug.mfds.go.kr/pbp/cmn/itemImageDownload/147426748486800003',
    ingredients: ['이부프로펜']
  }
];

// 로컬 약물 상세 정보
export const localDrugDetails: Record = {
  '200003354': {
    drugId: '200003354',
    name: '아스피린정100mg',
    manufacturer: '바이엘코리아',
    type: '혈전에 의한 질병의 예방',
    category: '해열진통소염제',
    imageUrl: 'https://nedrug.mfds.go.kr/pbp/cmn/itemImageDownload/147426748486800001',
    ingredients: ['아세틸살리실산'],
    indication: '혈전에 의한 질병의 예방',
    dosage: '1일 1회 1정 복용',
    warnings: ['위장장애, 출혈 증상이 있는 경우 주의'],
    sideEffects: ['위장장애, 소화불량, 구역'],
    interactions: [],
    storage: '실온보관'
  },
  // 추가 약물 정보...
};

// 로컬 데이터를 사용한 약물 검색 함수
export const searchDrugsLocal = (query: string): DrugSearchResult[] => {
  if (!query) return [];
  
  const lowercaseQuery = query.toLowerCase();
  return localDrugData.filter(drug => 
    drug.name.toLowerCase().includes(lowercaseQuery) ||
    drug.ingredients.some(ingredient => ingredient.toLowerCase().includes(lowercaseQuery))
  );
};

// 로컬 데이터를 사용한 약물 상세 정보 조회 함수
export const getDrugDetailsLocal = (drugId: string): DrugDetail | undefined => {
  return localDrugDetails[drugId];
};
```

## 통합된 API 서비스 클래스

마지막으로, 로컬 데이터와 API 데이터를 함께 사용할 수 있는 통합 서비스를 구현합니다:

```typescript
// MedicineService.ts
import * as DrugApi from './DrugApiService';
import { searchDrugsLocal, getDrugDetailsLocal } from './LocalDrugData';
import { DrugSearchResult, DrugDetail } from './DrugApiService';

// 네트워크 상태에 따라 로컬 또는 원격 데이터 사용
let useLocalData = false;

/**
 * 네트워크 상태 설정
 */
export const setUseLocalData = (useLocal: boolean) => {
  useLocalData = useLocal;
};

/**
 * 약물 검색 - 로컬 또는 API 데이터 사용
 */
export const searchMedicines = async (
  query: string,
  options?: {
    category?: string;
    manufacturer?: string;
    limit?: number;
  }
): Promise => {
  // 로컬 데이터 사용 설정인 경우
  if (useLocalData) {
    const results = searchDrugsLocal(query);
    return {
      success: true,
      results,
      total: results.length
    };
  }
  
  // API 데이터 시도
  try {
    const apiResult = await DrugApi.searchDrugs(query, options);
    
    // API 요청이 실패하면 로컬 데이터로 폴백
    if (!apiResult.success || apiResult.results.length === 0) {
      console.log('API 요청 실패, 로컬 데이터 사용');
      const results = searchDrugsLocal(query);
      return {
        success: true,
        results,
        total: results.length
      };
    }
    
    return apiResult;
  } catch (error) {
    console.error('약물 검색 중 오류 발생, 로컬 데이터로 대체:', error);
    const results = searchDrugsLocal(query);
    return {
      success: true,
      results,
      total: results.length
    };
  }
};

/**
 * 약물 상세 정보 조회 - 로컬 또는 API 데이터 사용
 */
export const getMedicineDetails = async (drugId: string): Promise => {
  // 로컬 데이터 사용 설정인 경우
  if (useLocalData) {
    const data = getDrugDetailsLocal(drugId);
    return data 
      ? { success: true, data } 
      : { success: false, error: '약물 정보를 찾을 수 없습니다.' };
  }
  
  // API 데이터 시도
  try {
    const apiResult = await DrugApi.getDrugDetails(drugId);
    
    // API 요청이 실패하면 로컬 데이터로 폴백
    if (!apiResult.success || !apiResult.data) {
      console.log('API 요청 실패, 로컬 데이터 사용');
      const data = getDrugDetailsLocal(drugId);
      return data 
        ? { success: true, data } 
        : { success: false, error: '약물 정보를 찾을 수 없습니다.' };
    }
    
    return apiResult;
  } catch (error) {
    console.error('약물 상세 정보 조회 중 오류 발생, 로컬 데이터로 대체:', error);
    const data = getDrugDetailsLocal(drugId);
    return data 
      ? { success: true, data } 
      : { success: false, error: '약물 정보를 찾을 수 없습니다.' };
  }
};
```

## 결론

리액트 네이티브에서 약학정보원 API를 연동할 때 발생하는 CORS 이슈는 여러 가지 방법으로 해결할 수 있습니다. 이 보고서에서 제시한 솔루션은 다음과 같습니다:

1. RNFetchBlob 라이브러리를 사용하여 네이티브 환경에서 직접 API 호출[8][11][13]
2. 프록시 서버를 설정하여 CORS 정책 우회[14][15]
3. 로컬 데이터를 사용한 폴백 메커니즘 구현[2]

특히 공공데이터포털의 서비스키 등록 문제(SERVICE_KEY_IS_NOT_REGISTERED_ERROR)와 HTTP 프로토콜 사용으로 인한 CORS 이슈는 본 솔루션을 통해 효과적으로 대응할 수 있습니다. 네트워크 연결이 불안정하거나 API 연결이 일시적으로 불가능한 상황에서도 앱이 정상적으로 동작할 수 있도록 로컬 데이터 폴백 메커니즘을 구현하는 것이 권장됩니다[2][5].

Citations:
[1] https://pplx-res.cloudinary.com/image/upload/v1744391977/user_uploads/UXcPAQDvNWtAINl/image.jpg
[2] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/53686762/e31c10cd-8839-4104-bb8f-cc2514ea3194/paste-2.txt
[3] https://dianapps.com/blog/integrating-apis-in-react-native-for-enhanced-functionality/
[4] https://reactnativetips.com/fix-cors-error-when-using-axios-in-react-native-development/
[5] https://www.youtube.com/watch?v=fcpZeYeINDw
[6] https://apipark.com/techblog/en/how-to-fix-the-invalid-user-associated-with-this-key-error-a-step-by-step-guide/
[7] https://github.com/wheresrhys/fetch-mock/issues/455
[8] https://www.codeduthu.com/blog/react-native-fix-cors-by-rn-fetch-blob
[9] https://stackoverflow.com/questions/69163214/react-native-proxy-for-api-requests
[10] https://www.justacademy.co/public/blog-detail/react-native-api-call-best-practice
[11] https://www.codeduthu.com/en/blog/react-native-fix-cors-by-rn-fetch-blob
[12] https://www.youtube.com/watch?v=34UNscgesSA
[13] https://www.npmjs.com/package/@codiac-team%2Frn-fetch-blob
[14] https://www.linkedin.com/pulse/setup-proxy-api-calls-development-anil-verma
[15] https://create-react-app.dev/docs/proxying-api-requests-in-development/
[16] https://stackoverflow.com/questions/79265082/cors-issue-with-nginx-and-fetch-react-native
[17] https://www.googlecloudcommunity.com/gc/Apigee/API-Key-validation-error/m-p/609865
[18] https://stackoverflow.com/questions/48836749/how-to-add-fallback-to-touchable-wrapper-in-react-native
[19] https://codezup.com/integrating-rest-apis-in-react-native-guide/
[20] https://www.dhiwise.com/post/cors-in-react-essential-techniques-for-web-developers
[21] https://www.bacancytechnology.com/blog/react-native-healthcare-apps
[22] https://community.openai.com/t/i-am-getting-this-api-key-error/903299
[23] https://program-note.tistory.com/43
[24] https://www.linkedin.com/advice/1/what-best-ways-integrate-third-party-apis-react-yptrf
[25] https://www.reddit.com/r/reactnative/comments/yo5tzw/dealing_with_cors/
[26] https://www.whitelotuscorporation.com/online-pharmacy-apps-with-react-native/
[27] https://platform.openai.com/docs/guides/error-codes
[28] https://www.freecodecamp.org/news/react-suspense/
[29] https://stackoverflow.com/questions/43144298/send-parameters-using-rnfetchblob-fetch
[30] https://www.youtube.com/watch?v=BdM5YaH-z3g
[31] https://stackoverflow.com/questions/35779202/use-fetch-to-post-a-blob-in-react-native/37029175
[32] https://dev.to/codeofrelevancy/how-to-set-up-a-proxy-server-in-react-dealing-with-cors-87e
[33] https://docs.sentry.io/platforms/react-native/tracing/trace-propagation/dealing-with-cors-issues/
[34] https://github.com/joltup/rn-fetch-blob/issues/140
[35] https://github.com/Kureev/react-native-network-proxy
[36] https://www.stackhawk.com/blog/react-cors-guide-what-it-is-and-how-to-enable-it/
[37] https://developer.mozilla.org/ko/docs/Web/API/Fetch_API/Using_Fetch
[38] https://github.com/react-native-community/cli/issues/1923
[39] https://github.com/react-native-webview/react-native-webview/issues/570
[40] https://github.com/joltup/rn-fetch-blob/issues/28

---
Perplexity로부터의 답변: pplx.ai/share